
General notes and critique
==========================

In our provider's code we ran into a few problems, but also had success with adapting their code to
work with our implementation. Overall, our biggest hurdles and concerns for the code we were given
was the initial lack of interfaces, coupling in incorrect places, and unclear javadoc.

When we were first given the code there was a lack of interfaces, but several references to concrete
classes that were not available. When we encountered this problem we assumed that most of the code
had public methods and as expected the providers gave created the interface we needed to work with.
However we still ran into the problems when another class was predominately static Methods and we
had to ask our providers again for an interface.

Another problem we had was with the coupling of functionality in the wrong places. For instance
we found that methods and functionality that should have been in the View was in Model. We found
this with the visisbility where there was a boolean flag in the model for shapes and the instead of
having it checked in the Hybrid View where the visinility is a concern when choosing shapes. It made
it more difficult to select shapes since it was stuck in the model and could not be picked through
the view. We also found that printAnimationwas still in the model of the animation, but we moved
modt of that functionality into the Textual View. Although the latter was a smaller problem it
was a functionality that we found is better suited in the View instead of keeping it in the model.

We found it difficult to follow along with their code where there were unclear javadoc or the
javadoc was not helpful for figuring out what the methods were supposed to be doing. We were stuck in
some places in the code such as in the view where there was functionality that seemed importnant but
the Javadoc was to vague and left us confused longer than we need to be. This happened when examining
the code for a method called copyVisibility where it was left us unsure as to it's purpose.
Sometimes due to this and luckily for our adapter we did not need to implment these methods as they
were not relevant to the code that we had to make our implmentation of the animation.

Assignment Questions
====================

How flexible are the interfaces you were given?
Their code was flexible, because it contained many methods that each had a seperate resonsibilty it
also had a bounty of method some that we have thought of as well in our design as well, but also
some extra methods. Some of these methods were a bit erroneous and unneccessary in our
implmentation as mentioned above.

How capable are the views?
The view seem capable we were able to get most of the views to work fully. From the screenshot they
had sent there was a slight problem in placement of shapes in the hybrid however we did not
experience that issue, but we had some troubles working with their hybrid views in other ways. The
other views work properly with our implmentation showing their capability.

How convenient was it to reuse their code?
For the most part it was convient, but there were some dependencies that should have stayed in the
view that made it more difficult to draw on thier code and adapt into ours.

How cleanly written and well-documented was their code?
As mentioned above there was Javadoc so it was well documented, However the quality of the Javadoc
was lacking where it was unclear or unhelpful to figure out what certain methods were supposed to do

If you needed to request changes from them, what were they and why were they needed?
We had to ask they implment an Interface-type instead of having many methods and functionlities that
relied on a concrete class. Without this  there are core functionalities that would fail. These
implementations included objects that represented the Position (Position2d --> IPosition2d) and the
Colors (Colors --> IColors) as well as a concrete Helper class that was mostly static, but turned
into an interface (IHelper). Without asking we would be unable to send correctly form shapes to pass
to our exisiting implpementation.