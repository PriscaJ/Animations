
    One large problem was that we received our code late from our providers so we ran into
    issues, but due to the tighter timeline, the providers did not have time to fix their design
    choices that made our model incompatible with their views.

    The provided code also had a representation of visibility in their Shape class, and
    we suggested they move their representation of visible shapes to be a list of visible shapes
    in their view, but they did not have time to make such changes.

    If they were able to do so, the fact that we do not have a "visibility" field in our
    shape would not have been a breaking point in our code, and we would not need to refactor
    our code to have access to view information from the shape. We considered retrieving info
    from our view class JListShape to see which shapes had been selected and thus which were
    "visible", but we considered doing so to be poor design in that the model classes are now
    concerned with the view class implementation.


