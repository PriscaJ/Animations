
Overall Implementation and design: Primarily designed to mimic the Command Pattern in order to
simplify the model interface. Through the command pattern the classes for shapes do not become
concerned with how they will be modified since the Animation itself takes care of it. The Model
loads all the shapes that will be used in the animation in a list then the Shape has its own list
of animation commands which will each invoke the neccessary animation Action (Move, ColorChange,
ScaleChange).

Interface AnimationOperations
This is the main interface for the model which contains the methods and behaviors that a model
should have in order to run an animation. Methods such as getShape that returns the shapes in the
current animation as well as the readBack which returns the animation as a String.

class AnimationModel - implements AnimationOperations
Field(s): ArrayList<Shapes>  all the shapes that are contained in this animation.

Interface Shapes

class Shape - enum ShapeType
There is only one class Shape since the qualities of a shape can mostly be shared between an oval
and a rectangle. If there needs to be an additional shape added in the future the enum type can be
 added and if a new class is needed it can extend the shape class and become backwards complatibale
 by adding what it needs.

Field(s):
 ArrayList<AnimationCommand> commands Commands that will be called for to call animation actions
 for this shape
  private String name The unique name that a shape has.
  private ShapeType type The type of shape the shape is, whihch is one of Oval, rectangle
  private double width, height The Dimensions of the shape
  private int appears, disappears The lifespan of a shape.
  private Point position The position whether that be the center or the lower left corner
  private Color color the color of the shape

Interface AnimationCommands

The commands are used to decouple the responsibilities between a shape and an Animation action. The
Shape does not worry about how it will be animated it only calles the Command which invokes its
field to call on its animation action

class MoveCommand
Field(s) Move the Action of the Animation

class ScaleCommand
Field(s) ScaleChange the Action of the Animation

class ColorCommand
Field(s) ColorChange the Action of the Animation

Interface Animations

abstract class AbstractAnimation - implements Animations
Field(s) - int start int finish how long the action lasts for

These are the classes that actually perform the action called they have a method that applies the
action it is attached to.
class Move - extends AbstractAnimation

class ScaleChange - extends AbstractAnimation

class ColorChange - extends AbstractAnimation